<?xml version="1.0"?>
<!-- Ce fichier ant fonctionne parfaitement pour ce qu'il est cens faire pour l'instant.
	 J'ajouterai au fur et  mesure diffrentes fonctionnalits supplmentaires. 
     Si vous avez des propositions de modifications, faites m'en part et on en discute.
     
     Si vous modifiez qqch sans m'en parler ou sans mon accord, veillez  ce que je ne 
     le sache pas et/ou que je ne le remarque pas sous peine de mort lente et extremement douloureuse.
     Vous etes prevenu.
     Have a nice day -->
     
     <!-- A implementer : buildClient, buildServeur, client, serveur, build all, run all, jar, javadoc
     NB : Pour lancer une nouvelle console, utiliser xterm -c 'commande'-->
     
<project name="troll" default="help" basedir=".">
    <property name="src.dir" value="src"/>
    <property name="src.client" value="${src.dir}/client"/>
    <property name="src.serveur" value="${src.dir}/serveur"/>
    <property name="src.commun" value="${src.dir}/commun"/>

    <property name="build.dir" value="build"/>
    <property name="build.client" value="${build.dir}/client"/>
    <property name="build.serveur" value="${build.dir}/serveur"/>
    <property name="build.commun" value="${build.dir}/commun"/>


    <property name="doc.dir" value="doc"/>
    <property name="doc.client" value="${doc.dir}/client"/>
    <property name="doc.serveur" value="${doc.dir}/serveur"/>
    <property name="doc.commun" value="${doc.dir}/commun"/>

	
    <property name="dist.dir" value="dist"/>
    <property name="res.dir" value="res"/>
    <property name="lib.dir" value="lib"/>
    

    <property name="clientClass" value="trollhammer.Client"/>
    <property name="serveurClass" value="trollhammer.Serveur"/>
    <property name="encodage" value="UTF-8"/>
    <property name="mysound" value="ant"/>
    
    <path id="classpath">
		<pathelement path="${build.commun}"/>
		<pathelement path="${build.client}"/>
		<pathelement path="${build.serveur}"/>
	</path>
    
    
    <target name="help" description="Affiche l'aide des differentes target disponibles">
    		<echo> Syntaxe du fichier build du projet Trollhammer</echo>
    		<echo> ----------------------------------------------</echo>
			<echo> Utilisations: ant [ant options] {target1} [target2 | ... ]</echo>
			<echo></echo>
			<echo> prepare - construit les differents repertoires necessaires
 au projet. Est utilise implicitement avant chaque compilation</echo>
 			<echo></echo>
			<echo> b (= build) - compile le projet en entier, 
 client et serveur en multithread</echo>
		 	<echo></echo>
			<echo> bc (= buildClient) - compile la partie client</echo>
			<echo></echo>
			<echo> bs (= buildServeur) - compile la partie serveur</echo>
			<echo></echo>
			<echo> client - (compile) et lance la partie client</echo>
			<echo></echo>
			<echo> serveur - (compile) et lance la partie serveur</echo>
			<echo></echo>
			<echo> Atester sous nuxrun - (compile) et lance le soft en entier</echo>
			<echo></echo>
			<echo> AFAIREjar - cree les fichiers jar</echo>
			<echo></echo>
			<echo> AFAIREjavadoc - cree la javadoc</echo>
			<echo></echo>

			<echo> putz (= clean) - nettoie le repertoire "${build.dir}"</echo>
			<echo></echo>
			<echo> megaputz (= dist-clean) - nettoie les repertoires de sorte Ã  
 faire un commit propre</echo>
			<echo></echo>

			<echo> -projecthelp - (une option Ant) Affiche les descriptions
		    de chaque cible (comme ici)</echo>
     	    <echo></echo>
			<tstamp/>
			<echo> Il est ${TSTAMP}, je vous souhaite une agreable journee</echo>
		
    
    </target>
    
    
 	<target name="prepare" description="Construit les differents repertoires necessaires au projet">
 	    <echo>Creation des repertoires</echo>
 	    <mkdir dir="${build.dir}"/>
 	    <mkdir dir="${build.client}"/>
 	    <mkdir dir="${build.serveur}"/>
 	    <mkdir dir="${build.commun}"/>
    
 	    
 	    <mkdir dir="${doc.dir}"/>
 	    <mkdir dir="${doc.client}"/>
 	    <mkdir dir="${doc.serveur}"/>
 	    <mkdir dir="${doc.commun}"/>

    	<!-- Ajoute un timestamp a cette creation. Ca ne se voit pas sur les fichiers ou repertoire, mais
    	ca peut etre utile ici-meme dans le fichier ant. Donc toi lecteur potentiel, tu t'en tapes en fait.
    	-->
    	
    	<tstamp/>
    		<echo message="${TSTAMP}"/>
    </target>
    	
	<target name="buildCommun" depends="prepare" description="Construit les classes communes">
		<echo>Compilation des classes communes</echo>
	
		<javac 	srcdir="${src.commun}" 
			destdir="${build.commun}" >
		</javac>
	</target>

                
    <target name="buildClient" depends="buildCommun" description="Construit le client uniquement">
        <echo>Compilation... du client</echo>
		<echo>Saviez-vous que cette fonction est deconseillee (deprecated)?</echo>
		<echo>Utilisez la commande "bc" a la place</echo>
        <javac 	srcdir="${src.client}" 
			destdir="${build.client}" >
			<classpath refid="classpath"/>
		</javac>
    </target>    

	<target name="bc" depends="buildCommun" description="Construit le client uniquement (alias)">
		<echo>Forge en cours pour... le client</echo>
		<sound>
        	<success source="${mysound}/won/"/>
        	<fail source="${mysound}/loose/"/>
        </sound>
		<javac encoding="${encodage}" 
			srcdir="${src.client}" 
			destdir="${build.client}" >
			<classpath refid="classpath"/>
		</javac>
	</target>

    <target name="buildServeur" depends="buildCommun" description="Construit le serveur uniquement">
        <echo>Compilation... du serveur</echo>
		<echo>Saviez-vous que cette fonction est deconseillee (deprecated)?</echo>
		<echo>Utilisez la commande "bs" a la place</echo>
        <javac encoding="${encodage}" 
			srcdir="${src.serveur}" 
			destdir="${build.serveur}" >
			<classpath refid="classpath"/>
		</javac>
    </target>   

    <target name="bs" depends="buildCommun" description="Construit le client uniquement (alias)">
        <echo>Forge en cours pour... le serveur</echo>
        <sound>
        	<success source="${mysound}/won/"/>
        	<fail source="${mysound}/loose/"/>
        </sound>

        <javac encoding="${encodage}" 
			srcdir="${src.serveur}" 
			destdir="${build.serveur}" >
			<classpath refid="classpath"/>
		</javac>
    </target>   

	<target name="build" depends="buildCommun" description="Construit tout le projet (2 threads)">
	
		<parallel>
			<sequential>
					<echo>Compilation serveur</echo>
					<echo>Saviez-vous que cette fonction est deconseillee (deprecated)?</echo>
					<echo>Utilisez la commande "b" a la place</echo>
					<javac encoding="${encodage}" 
					srcdir="${src.serveur}" 
					destdir="${build.serveur}" >
					<classpath refid="classpath"/>
					</javac>
	
			</sequential>
			<echo>Compilation client</echo>
			<javac encoding="${encodage}" 
				srcdir="${src.client}" 
				destdir="${build.client}" >
				<classpath refid="classpath"/>
			</javac>

		</parallel>
	</target>
	
	<target name="b" depends="buildCommun" description="Construit tout le projet (alias)">
	    <sound>
        	<success source="${mysound}/won/"/>
        	<fail source="${mysound}/loose/"/>
        </sound>

		<parallel>
			<sequential>
					<echo>Ambidextrie : forge pour le serveur</echo>
					<javac encoding="${encodage}" 
					srcdir="${src.serveur}" 
					destdir="${build.serveur}" >
					<classpath refid="classpath"/>
					</javac>
	
			</sequential>
			<echo>et forge pour le client en meme temps</echo>
			<javac encoding="${encodage}" 
				srcdir="${src.client}" 
				destdir="${build.client}" >
				<classpath refid="classpath"/>
			</javac>

		</parallel>
    </target>

  
    <target name="serveur" depends="buildServeur" description="Lancement du serveur (apres compilation)">
        <echo>Execution du serveur!</echo>
        <java classname="${serveurClass}">
            <classpath>
                <pathelement location="${build.serveur}"/>
            </classpath>
        </java>
    </target>
    
    <target name="client" depends="buildClient" description="Lancement du client (apres compilation)">
        <echo>Execution du client!</echo>
        <java classname="${clientClass}">
            <classpath>
                <pathelement location="${build.client}"/>
            </classpath>
        </java>
    </target>
    
    <target name="run" description="Execution du client et du serveur">
		
		<parallel>
			<sequential>

				<echo>Attente de 3 secondes avant le lancement du client</echo>
				<sleep seconds="3"/>	
				<exec executable="start" vmlauncher="false" os="Windows XP">
					<arg line="java -cp ${build.client};${build.commun} ${clientClass}"/>
				</exec>
				
				<exec executable="xterm" vmlauncher="false" os="Linux">
					<arg line="-e 'java -cp ${build.client};${build.commun} ${clientClass}'"/>
				</exec>

			</sequential>
			

	
			<exec executable="start" vmlauncher="false" os="Windows XP">
					<arg line="java -cp ${build.serveur};${build.commun} ${serveurClass}"/>
			</exec>
			
			<exec executable="xterm" vmlauncher="false" os="Linux">
					<arg line="-e 'java -cp ${build.client};${build.commun} ${clientClass}'"/>
			</exec>

	
		</parallel>
		<echo>Fini!</echo>
    
    </target>
    
    <target name="clean" description="Nettoyage des fichiers .class">
        <echo>Effacement des .class...</echo>
        
        <delete verbose="true">
            <fileset dir="${build.dir}"/>
        </delete>
    </target>
    
    <target name="putz" description="La putzfrau s'occupe de vos .class generes">
        <echo>Et ca putz!!!</echo>
        <delete verbose="true">
            <fileset dir="${build.dir}"/>
        </delete>
    </target>
    
    
    
    <target name="dist-clean" depends="clean" description="Nettoyage de tous les fichiers generes">
        <echo>Effacage...</echo>

        <delete verbose="true">

            <fileset dir="${doc.dir}"/>
		    <fileset dir="${build.dir}"/>
        </delete>

            <delete dir="${doc.client}"/>
            <delete dir="${doc.serveur}"/>
            <delete dir="${doc.commun}"/>
            <delete dir="${build.client}"/>
            <delete dir="${build.serveur}"/>
            <delete dir="${doc.dir}"/>
            <delete dir="${build.dir}"/>      
    </target>

    <target name="megaputz" depends="putz" description="Nettoyage de tous les fichiers generes (alias)">
        <echo>DESTRUCTION!!.</echo>

        <delete verbose="true">

            <fileset dir="${doc.dir}"/>
		    <fileset dir="${build.dir}"/>
        </delete>

            <delete dir="${doc.client}"/>
            <delete dir="${doc.serveur}"/>
            <delete dir="${doc.commun}"/>
            <delete dir="${build.client}"/>
            <delete dir="${build.serveur}"/>
            <delete dir="${doc.dir}"/>
            <delete dir="${build.dir}"/>      
    </target>


	<target name="javadoc" depends="build" description="Genere la javadoc du projet">
		<echo>Ne fait rien pour l'instant</echo>
	</target>

	<target name="jar" depends="build" description="Genere les fichiers jar du projet">
		<echo>Ne fait rien pour l'instant</echo>
	</target>
    
</project>