<?xml version="1.0"?>
<!-- Ce fichier ant fonctionne parfaitement pour ce qu'il est cens faire pour l'instant.
	 J'ajouterai au fur et  mesure diffrentes fonctionnalits supplmentaires. 
     Si vous avez des propositions de modifications, faites m'en part et on en discute.
     
     Si vous modifiez qqch sans m'en parler ou sans mon accord, veillez  ce que je ne 
     le sache pas et/ou que je ne le remarque pas sous peine de mort lente et extremement douloureuse.
     Vous etes prevenu.
     Have a nice day -->
     
     <!-- A implementer : buildClient, buildServeur, client, serveur, build all, run all, jar, javadoc
     NB : Pour lancer une nouvelle console, utiliser xterm -c 'commande'-->
     
<project name="troll" default="help" basedir=".">
    <property name="src.dir" value="src"/>
    <property name="src.client" value="${src.dir}/client"/>
    <property name="src.serveur" value="${src.dir}/serveur"/>
    <property name="src.common" value="${src.dir}/common"/>

    <property name="build.dir" value="build"/>
    <property name="build.client" value="${build.dir}/client"/>
    <property name="build.serveur" value="${build.dir}/serveur"/>

    <property name="doc.dir" value="doc"/>
    <property name="doc.client" value="${doc.dir}/client"/>
    <property name="doc.serveur" value="${doc.dir}/serveur"/>
    <property name="doc.common" value="${doc.dir}/common"/>


    <property name="sound.dir" value="soundsrc"/>
    <property name="dist.dir" value="dist"/>
    <property name="res.dir" value="res"/>
    <property name="lib.dir" value="lib"/>
    

    <property name="clientClass" value="trollhammer.Client"/>
    <property name="serveurClass" value="trollhammer.Serveur"/>
    <property name="encodage" value="UTF-8"/>
    <property name="mysound" value="libsounds"/>
    
    <path id="classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
		<pathelement location="${src.common}"/>
	</path>
    
    
    <target name="help" description="Affiche l'aide des differentes target disponibles">
    		<echo> Syntaxe du fichier build du projet Trollhammer</echo>
    		<echo> ----------------------------------------------</echo>
			<echo> Utilisations: ant [ant options] {target1} [target2 | ... ]</echo>
			<echo></echo>
			<echo> prepare - construit les differents repertoires necessaires
 au projet. Est utilise implicitement avant chaque compilation</echo>
 			<echo></echo>
			<echo> ATESTERbuild - compile le projet en entier, client et serveur</echo>
			<echo></echo>
			<echo> ATESTERbuildClient - compile la partie client</echo>
			<echo></echo>
			<echo> ATESTERbuildServeur - compile la partie serveur</echo>
			<echo></echo>
			<echo> ATESTERclient - (compile) et lance la partie client</echo>
			<echo></echo>
			<echo> ATESTERserveur - (compile) et lance la partie serveur</echo>
			<echo></echo>
			<echo> AFAIRErun - (compile) et lance le soft en entier</echo>
			<echo></echo>
			<echo> AFAIREjar - cree les fichiers jar</echo>
			<echo></echo>
			<echo> AFAIREjavadoc - cree la javadoc</echo>
			<echo></echo>

			<echo> clean - nettoie le repertoire "${build.dir}"</echo>
			<echo></echo>
			<echo> dist-clean - nettoie les repertoires de sorte Ã  
 faire un commit propre</echo>
			<echo></echo>

			<echo> -projecthelp - (une option Ant) Affiche les descriptions
		    de chaque cible (comme ici)</echo>
     	    <echo></echo>
			<tstamp/>
			<echo> Il est ${TSTAMP}, je vous souhaite une agreable journee</echo>
		
    
    </target>
    
    
 	<target name="prepare" description="Construit les differents repertoires necessaires au projet">
 	    <echo>Creation des repertoires</echo>
 	    <mkdir dir="${build.dir}"/>
 	    <mkdir dir="${build.client}"/>
 	    <mkdir dir="${build.serveur}"/>
 	    
 	    <mkdir dir="${src.dir}"/>
 	    <mkdir dir="${src.client}"/>
 	    <mkdir dir="${src.serveur}"/>
 	    <mkdir dir="${src.common}"/>
 	    
 	    <mkdir dir="${doc.dir}"/>
 	    <mkdir dir="${doc.client}"/>
 	    <mkdir dir="${doc.serveur}"/>
 	    <mkdir dir="${doc.common}"/>

    	<!-- Ajoute un timestamp a cette creation. Ca ne se voit pas sur les fichiers ou repertoire, mais
    	ca peut etre utile ici-meme dans le fichier ant. Donc toi lecteur potentiel, tu t'en tapes en fait.
    	-->
    	
    	<tstamp/>
    		<echo message="${TSTAMP}"/>
    </target>
    	
    <target name="build" depends="buildClient, buildServeur" description="Construit tout le projet">
        <echo></echo>
    </target>

    <target name="buildClient" depends="prepare" description="Construit le client uniquement">
        <echo>Compilation... du client</echo>
        <sound>
        	<success source="${mysound}/won/"/>
        	<fail source="${mysound}/loose/"/>
        </sound>
        <javac encoding="${encodage}" 
			srcdir="${src.client}" 
			destdir="${build.dir}" >
			<classpath refid="classpath"/>
		</javac>
    </target>    

    <target name="buildServeur" depends="prepare" description="Construit le serveur uniquement">
        <echo>Compilation... du serveur</echo>
        <sound>
        	<success source="${mysound}/won/"/>
        	<fail source="${mysound}/loose/"/>
        </sound>
        <javac encoding="${encodage}" 
			srcdir="${src.serveur}" 
			destdir="${build.dir}" >
			<classpath refid="classpath"/>
		</javac>
    </target>   

    
    <target name="serveur" depends="buildServeur" description="Lancement du serveur (apres compilation)">
        <echo>Execution du serveur!</echo>
        <java classname="{serveurClass}">
            <classpath>
                <pathelement location="${build.serveur}"/>
            </classpath>
        </java>
    </target>
    
    <target name="client" depends="buildClient" description="Lancement du client (apres compilation)">
        <echo>Execution du client!</echo>
        <java classname="{clientClass}">
            <classpath>
                <pathelement location="${build.client}"/>
            </classpath>
        </java>
    </target>
    
    <target name="clean" description="La putzfrau s'occupe de vos .class generes">
        <echo>Et ca putz!!!</echo>
        <delete verbose="true">
            <fileset dir="${build.dir}"/>
        </delete>
    </target>
    
    <target name="dist-clean" depends="clean" description="La putzfrau prend tout et jette tout par la fenetre">
        <echo>Et ca MEGAputz!!!</echo>

        <delete verbose="true">

            <fileset dir="${doc.dir}"/>
		    <fileset dir="${build.dir}"/>
        </delete>

            <delete dir="${doc.client}"/>
            <delete dir="${doc.serveur}"/>
            <delete dir="${doc.common}"/>
            <delete dir="${build.client}"/>
            <delete dir="${build.serveur}"/>
            <delete dir="${doc.dir}"/>
            <delete dir="${build.dir}"/>      
    </target>

	<target name="javadoc" depends="build" description="Genere la javadoc du projet">
		<echo>Ne fait rien pour l'instant</echo>
	</target>

	<target name="jar" depends="build" description="Genere les fichiers jar du projet">
		<echo>Ne fait rien pour l'instant</echo>
	</target>
    
</project>