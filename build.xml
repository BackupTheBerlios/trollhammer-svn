<?xml version="1.0"?>
<!-- Ce fichier ant fonctionne parfaitement pour ce qu'il est cens faire pour l'instant.
	 J'ajouterai au fur et  mesure diffrentes fonctionnalits supplmentaires. 
     Si vous avez des propositions de modifications, faites m'en part et on en discute.
     
     Si vous modifiez qqch sans m'en parler ou sans mon accord, veillez  ce que je ne 
     le sache pas et/ou que je ne le remarque pas sous peine de mort lente et extremement douloureuse.
     Vous etes prevenu.
     Have a nice day -->

     
<project name="troll" default="help" basedir=".">

	<property name="build.compiler" value="modern"/>
    <property name="src.dir" value="src"/>
    <property name="src.client" value="${src.dir}/client"/>
    <property name="src.serveur" value="${src.dir}/serveur"/>
    <property name="src.commun" value="${src.dir}/commun"/>

    <property name="build.dir" value="build"/>
    <property name="build.client" value="${build.dir}/client"/>
    <property name="build.serveur" value="${build.dir}/serveur"/>
    <property name="build.commun" value="${build.dir}/commun"/>


    <property name="doc.dir" value="doc"/>
    <property name="doc.client" value="${doc.dir}/client"/>
    <property name="doc.serveur" value="${doc.dir}/serveur"/>
    <property name="doc.commun" value="${doc.dir}/commun"/>

	
    <property name="dist.dir" value="dist"/>
    <property name="dist.client" value="${dist.dir}/client"/>
    <property name="dist.serveur" value="${dist.dir}/serveur"/>

    <property name="res.dir" value="ressources"/>
    <property name="lib.dir" value="lib"/>
    

    <property name="clientClass" value="trollhammer.Client"/>
    <property name="serveurClass" value="trollhammer.Serveur"/>
    <property name="guiClass" value="trollhammer.HI"/>
    <property name="guiTestClass" value="trollhammer.TestGUI"/>
    
    <property name="encodage" value="UTF8"/>
    <property name="mysound" value="ant"/>
    
    
    <!-- Definition des fichiers communs -->
    <fileset id="communfile.client" dir="${src.client}">
     <include name="Enums.java"/>
     <include name="Logger.java"/>
     <include name="Message.java"/>
     <include name="Objet.java"/>
     <include name="Participant.java"/>
     <include name="Utilisateur.java"/>
     <include name="Vente.java"/>
	</fileset>
		
	
    <fileset id="communfile.serveur" dir="${src.serveur}">
     <include name="Enums.java"/>
     <include name="Logger.java"/>
     <include name="Message.java"/>
     <include name="Objet.java"/>
     <include name="Participant.java"/>
     <include name="Utilisateur.java"/>
     <include name="Vente.java"/>
	</fileset>

    <path id="classpath">
		<pathelement path="${build.client}"/>
		<pathelement path="${build.serveur}"/>
		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
    
        <path id="sclasspath">
		<pathelement path="${build.serveur}"/>
		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
    <path id="cclasspath">
		<pathelement path="${build.client}"/>
		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<path id="javadocpath">
		<pathelement path="${src.client}"/>
		<pathelement path="${src.serveur}"/>
		<pathelement path="${src.commun}"/>
	</path>

    <target name="help" description="Affiche l'aide des differentes target disponibles">
    
    		<echo> Syntaxe du fichier build du projet Trollhammer</echo>
    		<echo> ----------------------------------------------</echo>
			<echo> Utilisations: ant [ant options] {target1} [target2 | ... ]</echo>
			<echo></echo>
			<echo> prepare - construit les differents repertoires necessaires
 au projet. Est utilise implicitement avant chaque compilation</echo>
 			<echo></echo>
			<echo> b (= build) - compile le projet en entier, 
 client et serveur en multithread</echo>
		 	<echo></echo>
			<echo> bc (= buildClient) - compile la partie client</echo>
			<echo></echo>
			<echo> bs (= buildServeur) - compile la partie serveur</echo>
			<echo></echo>
			<echo> (b)client - (compile) et lance la partie client</echo>
			<echo></echo>
			<echo> (b)serveur - (compile) et lance la partie serveur</echo>
			<echo></echo>
			<echo> run - lance le soft en entier</echo>
			<echo></echo>
			<echo> brun - (compile) et lance le soft en entier</echo>
			<echo></echo>
			<echo> jar - cree les fichiers jar</echo>
			<echo></echo>
			<echo> javadoc - cree la javadoc</echo>
			<echo></echo>

			<echo> putz (= clean) - nettoie le repertoire "${build.dir}"</echo>
			<echo></echo>
			<echo> megaputz (= dist-clean) - nettoie les repertoires de sorte Ã  
 faire un commit propre</echo>
			<echo></echo>

			<echo> -projecthelp - (une option Ant) Affiche les descriptions
		    de chaque cible (comme ici)</echo>
     	    <echo></echo>
			<tstamp/>
			<echo> Il est ${TSTAMP}, je vous souhaite une agreable journee</echo>
		
    
    </target>
    
    
 	<target name="prepare" description="Construit les differents repertoires necessaires au projet">
 	    <echo>Creation des repertoires</echo>
 	    <mkdir dir="${build.dir}"/>
 	    <mkdir dir="${build.client}"/>
 	    <mkdir dir="${build.serveur}"/>

 	    
 	    <mkdir dir="${doc.dir}"/>
 	    <mkdir dir="${doc.client}"/>
 	    <mkdir dir="${doc.serveur}"/>
 	    <mkdir dir="${doc.commun}"/>
 	    
 	    
 	    <mkdir dir="${dist.dir}"/>
 	    <mkdir dir="${dist.client}"/>
 	    <mkdir dir="${dist.serveur}"/>

 	    
	    
 	    <!-- On copie ces rogntudjus de fichiers communs pour que ca compile chez les gens normaux -->
 	    
 	    <echo>Copie de ces fichiers communs baveux</echo>
 	    <copy todir="${src.client}">
			<fileset dir="${src.commun}">
				<include name="**/*.java"/>
			</fileset>
		</copy>
		
		
 	    <copy todir="${src.serveur}">
			<fileset dir="${src.commun}">
				<include name="**/*.java"/>
			</fileset>
		</copy>
    	<!-- Ajoute un timestamp a cette creation. Ca ne se voit pas sur les fichiers ou repertoire, mais
    	ca peut etre utile ici-meme dans le fichier ant. Donc toi lecteur potentiel, tu t'en tapes en fait.
    	-->
    	
    	<tstamp/>
    		<echo message="${TSTAMP}"/>
    </target>
    	
              
    <target name="buildClient" depends="prepare" description="Construit le client uniquement">
		<echo>Forge en cours pour... le client</echo>
        <javac 	srcdir="${src.client}" 
			destdir="${build.client}"
			encoding="${encodage}" >
			<classpath refid="classpath"/>
			
		</javac>
    </target>    

	<target name="bc" depends="buildClient" description="Construit le client uniquement (alias)">
	</target>

    <target name="buildServeur" depends="prepare" description="Construit le serveur uniquement">
        <echo>Forge en cours pour... le serveur</echo>
        <javac 	srcdir="${src.serveur}" 
				destdir="${build.serveur}"
				encoding="${encodage}" >
				<classpath refid="classpath"/>
		</javac>
    </target>   

    <target name="bs" depends="buildServeur" description="Construit le client uniquement (alias)">
    </target>   

	<target name="build" depends="buildServeur, buildClient" description="Construit tout le projet">
	</target>
	
	<target name="b" depends="build" description="Construit tout le projet (alias)">

	
    </target>

  
    <target name="serveur" description="Lancement du serveur">
        <echo>Execution du serveur!</echo>
        <java classname="${serveurClass}" fork="true">
				<classpath refid="sclasspath"/>
        </java>
    </target>
    
    <target name="client" description="Lancement du client">
        <echo>Execution du client!</echo>
        <java classname="${clientClass}" fork="true">
				<classpath refid="cclasspath"/>
        </java>
    </target>
    
    <target name="gui" depends="buildClient" description="Lancement du gui">
        <echo>Execution de l'interface!</echo>
        <java classname="${guiClass}" fork="true" failonerror="true">
				<classpath refid="cclasspath"/>
				
        </java>
    </target>
    
    <target name="testGUI" depends="buildClient" description="Test de la GUI">
        <echo>Test de l'interface!</echo>
        <java classname="${guiTestClass}" fork="true" failonerror="true">
                <classpath refid="cclasspath"/>
        </java>
    </target>


    <target name="bserveur" depends="buildServeur, serveur" description="Lancement du serveur (apres compilation)">
    </target>
    
    <target name="bclient" depends="buildClient, client" description="Lancement du client (apres compilation)">
    </target>
    
    
    <target name="run" description="Execution du client et du serveur">
    	<splash imageurl="http://www.bulldogbuckle.com/newsite/images/lg_d1111p.jpg"/> 

		<sound>
			<success source="ressources/snd/activation.wav"/>
		    <fail source=""/>

		</sound>
		<parallel>
			<sequential>

				<echo>Attente de 3 secondes avant le lancement du client</echo>
				<sleep seconds="3"/>	
				<exec executable="start" vmlauncher="false" os="Windows XP" spawn="true">
					<arg line="ant client"/>
				</exec>
				
				<exec executable="xterm" vmlauncher="false" os="Linux" spawn="true">
					<arg line="-e ant client"/>
				</exec>

				<exec executable="xterm" vmlauncher="false" os="Mac OS X" spawn="true">
					<arg line="-e ant client"/>
				</exec>

			</sequential>
			

			<echo>Lancement du serveur</echo>
			<exec executable="start" vmlauncher="false" os="Windows XP" spawn="true">
					<arg line="ant serveur"/>
			</exec>
			
			<exec executable="xterm" vmlauncher="false" os="Linux" spawn="true">
					<arg line="-e ant serveur"/>
			</exec>

			<exec executable="xterm" vmlauncher="false" os="Mac OS X" spawn="true">
					<arg line="-e ant serveur"/>
			</exec>
	
		</parallel>
		<echo>Fini!</echo>
    </target>
    
    <target name="brun" depends="b, run" description="Execution du client et du serveur (apres compilation)">
    
    </target>
    
    <target name="javadoc" depends="prepare" description="Javadoc banane!">
    
		<javadoc classpathref="classpath" sourcepathref="javadocpath" packagenames="trollhammer.*" destdir="${doc.dir}" Private="true"/>
	</target>
    
    
    
    <target name="clean" depends="putz" description="Nettoyage des fichiers .class">
    </target>
    
    <target name="putz" description="La putzfrau s'occupe de vos .class generes">
        <echo>Effacement des .class</echo>
        <delete>
            <fileset dir="${build.dir}"/>
        </delete>
    </target>
    
    
    
    <target name="dist-clean" depends="megaputz" description="Nettoyage de tous les fichiers generes">
    </target>
    

    <target name="megaputz" depends="putz" description="Nettoyage de tous les fichiers generes (alias)">
		
        <echo>DESTRUCTION!!.</echo>

        <delete verbose="true">

            <fileset dir="${doc.dir}"/>
		    <fileset dir="${build.dir}"/>
        </delete>

            <delete dir="${doc.client}"/>
            <delete dir="${doc.serveur}"/>
            <delete dir="${doc.commun}"/>
            <delete dir="${build.client}"/>
            <delete dir="${build.serveur}"/>
            <delete dir="${doc.dir}"/>
            <delete dir="${build.dir}"/>   
            <delete dir="${dist.dir}"/> 
        <delete verbose="true">
			<fileset refid="communfile.client"/>
        </delete>
        <delete verbose="true">
			<fileset refid="communfile.serveur"/>
        </delete>
              
    </target>
	


	<target name="jar" depends="b" description="Genere les fichiers jar du projet">
			
			<copy file="${lib.dir}/forms.jar" todir="${dist.client}/lib/"/>

			<copy todir="${dist.client}/ressources/"> 
				<fileset dir="${res.dir}"/>
			</copy>
			
			<jar jarfile="${dist.client}/client.jar"
				basedir="${build.client}" >
				<manifest>
					<attribute name="Main-Class" value = "${clientClass}"/>
					<attribute name="Class-Path" value = "lib/forms.jar"/>
					<attribute name="Auteur" value = "${user.name}"/>
					<attribute name="Date" value = "${TODAY}"/>
				</manifest>
			</jar>
			
			<jar jarfile="${dist.serveur}/serveur.jar"
				basedir="${build.serveur}" >
				<manifest>
					<attribute name="Main-Class" value = "${serveurClass}"/>
					<attribute name="Auteur" value = "${user.name}"/>
					<attribute name="Date" value = "${TODAY}"/>
				</manifest>
			</jar>

			
	</target>
    <target name="rejar" depends="megaputz,jar" description="Genere les fichiers jar du projet">
	</target>
 
    <target name="total" depends="javadoc,jar,version" description="Fait tout mouahahaha">
	</target>
	
	<target name="version" description="Affiche le numÃ©ro de version">

	</target>

    
</project>
